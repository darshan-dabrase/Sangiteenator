import pygame
from PyQt5 import QtCore, QtGui, QtWidgets
import  playsound
from threading import Thread


from scipy.io import wavfile
import argparse
import numpy as np
import pygame
import sys
import warnings
from pydub import AudioSegment
from tkinter import Tk
from tkinter import ttk
from tkinter.filedialog import askopenfilename





def speedx(snd_array, factor):
    """ Speeds up / slows down a sound, by some factor. """
    indices = np.round(np.arange(0, len(snd_array), factor))
    indices = indices[indices < len(snd_array)].astype(int)
    return snd_array[indices]


def stretch(snd_array, factor, window_size, h):
    """ Stretches/shortens a sound, by some factor. """
    phase = np.zeros(window_size)
    hanning_window = np.hanning(window_size)
    result = np.zeros(int(len(snd_array) / factor + window_size))

    for i in np.arange(0, len(snd_array) - (window_size + h), h*factor):
        i = int(i)
        # Two potentially overlapping subarrays
        a1 = snd_array[i: i + window_size]
        a2 = snd_array[i + h: i + window_size + h]

        # The spectra of these arrays
        s1 = np.fft.fft(hanning_window * a1)
        s2 = np.fft.fft(hanning_window * a2)

        # Rephase all frequencies
        phase = (phase + np.angle(s2/s1)) % 2*np.pi

        a2_rephased = np.fft.ifft(np.abs(s2)*np.exp(1j*phase))
        i2 = int(i/factor)
        result[i2: i2 + window_size] += hanning_window*a2_rephased.real

    # normalize (16bit)
    result = ((2**(16-4)) * result/result.max())

    return result.astype('int16')


def pitchshift(snd_array, n, window_size=2**13, h=2**11):
    """ Changes the pitch of a sound by ``n`` semitones. """
    factor = 2**(1.0 * n / 12.0)
    stretched = stretch(snd_array, 1.0/factor, window_size, h)
    return speedx(stretched[window_size:], factor)


def parse_arguments():
    description = ('Use your computer keyboard as a "piano"')

    parser = argparse.ArgumentParser(description=description)
    
    parser.add_argument(
        '--wav', '-w',
        metavar='FILE',
        type=argparse.FileType('r'),
        default='enhanced.wav',
        help='WAV file (default: enhanced.wav)')
    

    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='verbose mode')

    return (parser.parse_args(), parser)
    


def soundmaker():
    Tk().withdraw() # we don't want a full GUI, so keep the root window from appearing
    filename = askopenfilename() # show an "Open" dialog box and return the path to the selected file
    print(filename)

    sound1 = AudioSegment.from_mp3(filename)
    sound1= sound1.set_channels(1)
    sound1= sound1 + 20
    sound1.export("enhanced.wav", format="wav")
    # Parse command line arguments
    (args, parser) = parse_arguments()

    # Enable warnings from scipy if requested
    if not args.verbose:
        warnings.simplefilter('ignore')

    fps, sound = wavfile.read(args.wav.name)

    tones = range(-13,13)
    sys.stdout.write('Transponding sound file... ')
    sys.stdout.flush()
    transposed_sounds = [pitchshift(sound, n) for n in tones]
    print('DONE')


    # So flexible ;)
    pygame.mixer.init(fps, -16, 1, 2048)
    pygame.font.init()
                

    keys = range(0,25)
    sounds = map(pygame.sndarray.make_sound, transposed_sounds)
    key_sound = dict(zip(keys, sounds))


    
    sound = pygame.mixer.Sound(key_sound[0])
    sound_raw = sound.get_raw()
    file1 = open(r"Sound file\ c4.mp3", "wb")
    file1.write(sound_raw)
    file1.close()

    sound = pygame.mixer.Sound(key_sound[1])
    sound_raw = sound.get_raw()
    file2 = open(r"Sound file\ c40.mp3", "wb")
    file2.write(sound_raw)
    file2.close()

    sound = pygame.mixer.Sound(key_sound[2])
    sound_raw = sound.get_raw()
    file3 = open(r"Sound file\ d4.mp3", "wb")
    file3.write(sound_raw)
    file3.close()

    sound = pygame.mixer.Sound(key_sound[3])
    sound_raw = sound.get_raw()
    file4 = open(r"Sound file\ d40.mp3", "wb")
    file4.write(sound_raw)
    file4.close()


    sound = pygame.mixer.Sound(key_sound[4])
    sound_raw = sound.get_raw()
    file5 = open(r"Sound file\ e4.mp3", "wb")
    file5.write(sound_raw)
    file5.close()


    sound = pygame.mixer.Sound(key_sound[5])
    sound_raw = sound.get_raw()
    file6 = open(r"Sound file\ f4.mp3", "wb")
    file6.write(sound_raw)
    file6.close()


    sound = pygame.mixer.Sound(key_sound[6])
    sound_raw = sound.get_raw()
    file7 = open(r"Sound file\ f40.mp3", "wb")
    file7.write(sound_raw)
    file7.close()


    sound = pygame.mixer.Sound(key_sound[7])
    sound_raw = sound.get_raw()
    file8 = open(r"Sound file\ g4.mp3", "wb")
    file8.write(sound_raw)
    file8.close()


    sound = pygame.mixer.Sound(key_sound[8])
    sound_raw = sound.get_raw()
    file9 = open(r"Sound file\ g40.mp3", "wb")
    file9.write(sound_raw)
    file9.close()


    sound = pygame.mixer.Sound(key_sound[9])
    sound_raw = sound.get_raw()
    file10 = open(r"Sound file\ a4.mp3", "wb")
    file10.write(sound_raw)
    file10.close()

    sound = pygame.mixer.Sound(key_sound[10])
    sound_raw = sound.get_raw()
    file11 = open(r"Sound file\ a40.mp3", "wb")
    file11.write(sound_raw)
    file11.close()


    sound = pygame.mixer.Sound(key_sound[11])
    sound_raw = sound.get_raw()
    file12 = open(r"Sound file\ b4.mp3", "wb")
    file12.write(sound_raw)
    file12.close()


    sound = pygame.mixer.Sound(key_sound[12])
    sound_raw = sound.get_raw()
    file13 = open(r"Sound file\ c5.mp3", "wb")
    file13.write(sound_raw)
    file13.close()


    sound = pygame.mixer.Sound(key_sound[13])
    sound_raw = sound.get_raw()
    file14 = open(r"Sound file\ c50.mp3", "wb")
    file14.write(sound_raw)
    file14.close()


    sound = pygame.mixer.Sound(key_sound[14])
    sound_raw = sound.get_raw()
    file15 = open(r"Sound file\ d5.mp3", "wb")
    file15.write(sound_raw)
    file15.close()


    sound = pygame.mixer.Sound(key_sound[15])
    sound_raw = sound.get_raw()
    file16 = open(r"Sound file\ d50.mp3", "wb")
    file16.write(sound_raw)
    file16.close()


    sound = pygame.mixer.Sound(key_sound[16])
    sound_raw = sound.get_raw()
    file17 = open(r"Sound file\ e5.mp3", "wb")
    file17.write(sound_raw)
    file17.close()

    sound = pygame.mixer.Sound(key_sound[17])
    sound_raw = sound.get_raw()
    file18 = open(r"Sound file\ f5.mp3", "wb")
    file18.write(sound_raw)
    file18.close()


    sound = pygame.mixer.Sound(key_sound[18])
    sound_raw = sound.get_raw()
    file19 = open(r"Sound file\ f50.mp3", "wb")
    file19.write(sound_raw)
    file19.close()


    sound = pygame.mixer.Sound(key_sound[19])
    sound_raw = sound.get_raw()
    file20 = open(r"Sound file\ g5.mp3", "wb")
    file20.write(sound_raw)
    file20.close()


    sound = pygame.mixer.Sound(key_sound[20])
    sound_raw = sound.get_raw()
    file21 = open(r"Sound file\ g50.mp3", "wb")
    file21.write(sound_raw)
    file21.close()

    sound = pygame.mixer.Sound(key_sound[21])
    sound_raw = sound.get_raw()
    file22 = open(r"Sound file\ a5.mp3", "wb")
    file22.write(sound_raw)
    file22.close()


    sound = pygame.mixer.Sound(key_sound[22])
    sound_raw = sound.get_raw()
    file23 = open(r"Sound file\ a50.mp3", "wb")
    file23.write(sound_raw)
    file23.close()

    sound = pygame.mixer.Sound(key_sound[23])
    sound_raw = sound.get_raw()
    file24 = open(r"Sound file\ b5.mp3", "wb")
    file24.write(sound_raw)
    file24.close()


    sound = pygame.mixer.Sound(key_sound[24])
    sound_raw = sound.get_raw()
    file25 = open(r"Sound file\ c6.mp3", "wb")
    file25.write(sound_raw)
    file25.close()

soundmaker()

class Ui_MainWindow(object):

	
	def setupUi(self, MainWindow):
		MainWindow.setObjectName("MainWindow")
		MainWindow.resize(659, 251)
		
		# We require a sender, that will tell us which key is pressed
		self.mw  = MainWindow
		
		self.centralwidget = QtWidgets.QWidget(MainWindow)
		self.centralwidget.setObjectName("centralwidget")

		#SELECT
		self.select = QtWidgets.QPushButton(self.centralwidget)
		self.select.setGeometry(QtCore.QRect(200, 5, 241, 20))
		self.select.setStyleSheet("#select{\n"
	"background-color: rgb(60, 60, 60);\n"
	"background-color: qlineargradient(spread:pad, x1:0.711, y1:1, x2:0.711, y2:0.203455 , stop:0 rgba(250, 250, 250, 255), stop:1 rgba(128, 128, 128, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#select:pressed{\n"
	"background-color: rgb(128, 128, 128);\n"
	"\n"
	"}")
		self.select.setText("Select")
		self.select.setObjectName("select")
		self.select.clicked.connect(soundmaker)

		#C4
		self.c4 = QtWidgets.QPushButton(self.centralwidget)
		self.c4.setGeometry(QtCore.QRect(20, 30, 41, 181))
		self.c4.setStyleSheet("#c4{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#c4:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.c4.setText("")
		self.c4.setObjectName("c4")

		#D4
		self.d4 = QtWidgets.QPushButton(self.centralwidget)
		self.d4.setGeometry(QtCore.QRect(60, 30, 41, 181))
		self.d4.setStyleSheet("#d4{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#d4:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.d4.setText("")
		self.d4.setObjectName("d4")

                                        #c40
		self.c40 = QtWidgets.QPushButton(self.centralwidget)
		self.c40.setGeometry(QtCore.QRect(40, 30, 31, 111))
		self.c40.setStyleSheet("#c40{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#c40:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.c40.setText("")
		self.c40.setObjectName("c40")

		#d40
		self.d40 = QtWidgets.QPushButton(self.centralwidget)
		self.d40.setGeometry(QtCore.QRect(80, 30, 31, 111))
		self.d40.setStyleSheet("#d40{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#d40:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.d40.setText("")
		self.d40.setObjectName("d40")

		#e4
		self.e4 = QtWidgets.QPushButton(self.centralwidget)
		self.e4.setGeometry(QtCore.QRect(100, 30, 41, 181))
		self.e4.setStyleSheet("#e4{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#e4:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.e4.setText("")
		self.e4.setObjectName("e4")

		#f4
		self.f4 = QtWidgets.QPushButton(self.centralwidget)
		self.f4.setGeometry(QtCore.QRect(140, 30, 41, 181))
		self.f4.setStyleSheet("#f4{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#f4:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.f4.setText("")
		self.f4.setObjectName("f4")


		#g4
		self.g4 = QtWidgets.QPushButton(self.centralwidget)
		self.g4.setGeometry(QtCore.QRect(180, 30, 41, 181))
		self.g4.setStyleSheet("#g4{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#g4:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.g4.setText("")
		self.g4.setObjectName("g4")

		#a4
		self.a4 = QtWidgets.QPushButton(self.centralwidget)
		self.a4.setGeometry(QtCore.QRect(220, 30, 41, 181))
		self.a4.setStyleSheet("#a4{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#a4:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.a4.setText("")
		self.a4.setObjectName("a4")

		#b4
		self.b4 = QtWidgets.QPushButton(self.centralwidget)
		self.b4.setGeometry(QtCore.QRect(260, 30, 41, 181))
		self.b4.setStyleSheet("#b4{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#b4:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.b4.setText("")
		self.b4.setObjectName("b4")

		#c5
		self.c5 = QtWidgets.QPushButton(self.centralwidget)
		self.c5.setGeometry(QtCore.QRect(300, 30, 41, 181))
		self.c5.setStyleSheet("#c5{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#c5:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.c5.setText("")
		self.c5.setObjectName("c5")

		#d5
		self.d5 = QtWidgets.QPushButton(self.centralwidget)
		self.d5.setGeometry(QtCore.QRect(340, 30, 41, 181))
		self.d5.setStyleSheet("#d5{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#d5:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.d5.setText("")
		self.d5.setObjectName("d5")

		#a5
		self.a5 = QtWidgets.QPushButton(self.centralwidget)
		self.a5.setGeometry(QtCore.QRect(500, 30, 41, 181))
		self.a5.setStyleSheet("#a5{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#a5:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.a5.setText("")
		self.a5.setObjectName("a5")

		#e5
		self.e5 = QtWidgets.QPushButton(self.centralwidget)
		self.e5.setGeometry(QtCore.QRect(380, 30, 41, 181))
		self.e5.setStyleSheet("#e5{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#e5:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.e5.setText("")
		self.e5.setObjectName("e5")

		#g5
		self.g5 = QtWidgets.QPushButton(self.centralwidget)
		self.g5.setGeometry(QtCore.QRect(460, 30, 41, 181))
		self.g5.setStyleSheet("#g5{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#g5:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.g5.setText("")
		self.g5.setObjectName("g5")

		#f5
		self.f5 = QtWidgets.QPushButton(self.centralwidget)
		self.f5.setGeometry(QtCore.QRect(420, 30, 41, 181))
		self.f5.setStyleSheet("#f5{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#f5:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.f5.setText("")
		self.f5.setObjectName("f5")

		#b5
		self.b5 = QtWidgets.QPushButton(self.centralwidget)
		self.b5.setGeometry(QtCore.QRect(540, 30, 41, 181))
		self.b5.setStyleSheet("#b5{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#b5:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.b5.setText("")
		self.b5.setObjectName("b5")

		#c6
		self.c6 = QtWidgets.QPushButton(self.centralwidget)
		self.c6.setGeometry(QtCore.QRect(580, 30, 41, 181))
		self.c6.setStyleSheet("#c6{\n"
	"background-color: rgb(242, 242, 242);\n"
	"background-color: qlineargradient(spread:pad, x1:1, y1:0.711, x2:0.903455, y2:0.711, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"\n"
	"\n"
	"#c6:pressed{\n"
	"background-color: rgb(250, 250, 250);\n"
	"\n"
	"}")
		self.c6.setText("")
		self.c6.setObjectName("c6")

		#f40
		self.f40 = QtWidgets.QPushButton(self.centralwidget)
		self.f40.setGeometry(QtCore.QRect(160, 30, 31, 111))
		self.f40.setStyleSheet("#f40{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#f40:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.f40.setText("")
		self.f40.setObjectName("f40")

		#g40
		self.g40 = QtWidgets.QPushButton(self.centralwidget)
		self.g40.setGeometry(QtCore.QRect(200, 30, 31, 111))
		self.g40.setStyleSheet("#g40{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#g40:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.g40.setText("")
		self.g40.setObjectName("g40")

		#a40
		self.a40 = QtWidgets.QPushButton(self.centralwidget)
		self.a40.setGeometry(QtCore.QRect(240, 30, 31, 111))
		self.a40.setStyleSheet("#a40{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#a40:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.a40.setText("")
		self.a40.setObjectName("a40")

		#c50
		self.c50 = QtWidgets.QPushButton(self.centralwidget)
		self.c50.setGeometry(QtCore.QRect(320, 30, 31, 111))
		self.c50.setStyleSheet("#c50{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#c50:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.c50.setText("")
		self.c50.setObjectName("c50")

		#d50
		self.d50 = QtWidgets.QPushButton(self.centralwidget)
		self.d50.setGeometry(QtCore.QRect(360, 30, 31, 111))
		self.d50.setStyleSheet("#d50{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#d50:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.d50.setText("")
		self.d50.setObjectName("d50")

		#d50
		self.f50 = QtWidgets.QPushButton(self.centralwidget)
		self.f50.setGeometry(QtCore.QRect(440, 30, 31, 111))
		self.f50.setStyleSheet("#f50{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#f50:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.f50.setText("")
		self.f50.setObjectName("f50")

		#g50
		self.g50 = QtWidgets.QPushButton(self.centralwidget)
		self.g50.setGeometry(QtCore.QRect(480, 30, 31, 111))
		self.g50.setStyleSheet("#g50{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#g50:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.g50.setText("")
		self.g50.setObjectName("g50")

		#g50
		self.a50 = QtWidgets.QPushButton(self.centralwidget)
		self.a50.setGeometry(QtCore.QRect(520, 30, 31, 111))
		self.a50.setStyleSheet("#a50{\n"
	"background-color: rgb(0, 0, 0);\n"
	"background-color: qlineargradient(spread:pad, x1:0.028, y1:0.619, x2:1, y2:0.494, stop:0.852273 rgba(0, 0, 0, 250), stop:1 rgba(255, 255, 255, 255));\n"
	"}\n"
	"#a50:pressed{\n"
	"background-color: rgb(0, 0, 0);\n"
	"\n"
	"    background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255));\n"
	"\n"
	"}\n"
	"")
		self.a50.setText("")
		self.a50.setObjectName("a50")

		self.c4.raise_()
		self.d4.raise_()
		self.c40.raise_()
		self.e4.raise_()
		self.f4.raise_()
		self.d40.raise_()
		self.g4.raise_()
		self.a4.raise_()
		self.b4.raise_()
		self.c5.raise_()
		self.d5.raise_()
		self.a5.raise_()
		self.e5.raise_()
		self.g5.raise_()
		self.f5.raise_()
		self.b5.raise_()
		self.c6.raise_()
		
		self.f40.raise_()
		self.g40.raise_()
		self.a40.raise_()
		self.c50.raise_()
		self.d50.raise_()
		self.f50.raise_()
		self.g50.raise_()
		self.a50.raise_()
		MainWindow.setCentralWidget(self.centralwidget)
		self.statusbar = QtWidgets.QStatusBar(MainWindow)
		self.statusbar.setObjectName("statusbar")
		MainWindow.setStatusBar(self.statusbar)

		self.retranslateUi(MainWindow)
		QtCore.QMetaObject.connectSlotsByName(MainWindow)
		
		# Here we make a dict of threads called th
		self.th = {}
		
		# Lets connect a key to the button.
		# Lets say c4 is a button or key of piano
		# As u can see that i have added all the keys here
		# These are white keys

		self.c4.clicked.connect(self.value_c4)
		self.d4.clicked.connect(self.value_d4)
		self.e4.clicked.connect(self.value_e4)
		self.f4.clicked.connect(self.value_f4)
		self.g4.clicked.connect(self.value_g4) 
		self.a4.clicked.connect(self.value_a4) 
		self.b4.clicked.connect(self.value_b4) 
		self.c5.clicked.connect(self.value_c5) 
		self.d5.clicked.connect(self.value_d5) 
		self.e5.clicked.connect(self.value_e5) 
		self.f5.clicked.connect(self.value_f5)
		self.g5.clicked.connect(self.value_g5) 
		self.a5.clicked.connect(self.value_a5) 
		self.b5.clicked.connect(self.value_b5) 
		self.c6.clicked.connect(self.value_c6) 
		
		# These are the black keys
		self.c40.clicked.connect(self.value_c40) 
		self.c50.clicked.connect(self.value_c50) 
		self.d40.clicked.connect(self.value_d40) 
		self.d50.clicked.connect(self.value_d50) 
		self.f40.clicked.connect(self.value_f40) 
		self.f50.clicked.connect(self.value_f50) 
		self.g40.clicked.connect(self.value_g40) 
		self.g50.clicked.connect(self.value_g50) 
		self.a40.clicked.connect(self.value_a40) 
		self.a50.clicked.connect(self.value_a50) 
		
		# ok so lets run it.
		# To show how its working lets print the path of the sender
		# Similarly lets add all the keys.
		# Oh yes lets play and see if all keys are working.
		
	# Lets make function to play sound
	pygame.mixer.init()
	
	def play_notes(self,notePath):
		playsound.playsound(notePath,False)
		print(notePath)
	
	
	# Lets make another function to run the threads

	def value_a4(self):
		data = open('Sound file\ a4.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()

	def value_b4(self):
		data = open('Sound file\ b4.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()


		
	def value_c4(self):
		data = open('Sound file\ c4.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_d4(self):
		data = open('Sound file\ d4.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_e4(self):
		data = open('Sound file\ e4.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_f4(self):
		data = open('Sound file\ f4.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_g4(self):
		data = open('Sound file\ g4.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_a5(self):
		data = open('Sound file\ a5.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_b5(self):
		data = open('Sound file\ b5.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_c5(self):
		data = open('Sound file\ c5.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_d5(self):
		data = open('Sound file\ d5.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_e5(self):
		data = open('Sound file\ e5.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_f5(self):
		data = open('Sound file\ f5.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_g5(self):
		data = open('Sound file\ g5.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()


	def value_c6(self):
		data = open('Sound file\ c6.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           
	def value_a40(self):
		data = open('Sound file\ a40.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_c40(self):
		data = open('Sound file\ c40.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_d40(self):
		data = open('Sound file\ d40.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_f40(self):
		data = open('Sound file\ f40.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()


	def value_g40(self):
		data = open('Sound file\ g40.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_a50(self):
		data = open('Sound file\ a50.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_c50(self):
		data = open('Sound file\ c50.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_d50(self):
		data = open('Sound file\ d50.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_f50(self):
		data = open('Sound file\ f50.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()
                           

	def value_g50(self):
		data = open('Sound file\ g50.mp3', 'rb').read()
		soundx = pygame.mixer.Sound(buffer=data)                       
		audio = soundx.play()

                           
                           
       	
	def run_threads(self):
		self.th[self.mw.sender().objectName()] = Thread(target = self.play_notes, args = ('Sound file/'+'{}.mp3'.format(self.mw.sender().objectName()),))
		
		# So here the th dict will have a key which is the name of piano key, 
		# The thread has a target function self.play_notes, and arguments args is 
		# simply the path Sounds/keyname.wav
		# Then we start and join the thread
		self.th[self.mw.sender().objectName()].start()
		self.th[self.mw.sender().objectName()].join()
		
	def retranslateUi(self, MainWindow):
		_translate = QtCore.QCoreApplication.translate
		MainWindow.setWindowTitle(_translate("MainWindow", "Sangeetinator"))
		self.c4.setShortcut(_translate("MainWindow", "TAB"))
		self.d4.setShortcut(_translate("MainWindow", "Q"))
		self.c40.setShortcut(_translate("MainWindow", "1"))
		self.d40.setShortcut(_translate("MainWindow", "2"))
		self.e4.setShortcut(_translate("MainWindow", "W"))
		self.f4.setShortcut(_translate("MainWindow", "E"))
		self.g4.setShortcut(_translate("MainWindow", "R"))
		self.a4.setShortcut(_translate("MainWindow", "T"))
		self.b4.setShortcut(_translate("MainWindow", "Y"))
		self.c5.setShortcut(_translate("MainWindow", "U"))
		self.d5.setShortcut(_translate("MainWindow", "I"))
		self.a5.setShortcut(_translate("MainWindow", "]"))
		self.e5.setShortcut(_translate("MainWindow", "o"))
		self.g5.setShortcut(_translate("MainWindow", "["))
		self.f5.setShortcut(_translate("MainWindow", "p"))
		self.b5.setShortcut(_translate("MainWindow","delete"))
		self.c6.setShortcut(_translate("MainWindow", "end"))
		self.f40.setShortcut(_translate("MainWindow", "4"))
		self.g40.setShortcut(_translate("MainWindow", "5"))
		self.a40.setShortcut(_translate("MainWindow", "6"))
		self.c50.setShortcut(_translate("MainWindow", "8"))
		self.d50.setShortcut(_translate("MainWindow", "9"))
		self.f50.setShortcut(_translate("MainWindow", "-"))
		self.g50.setShortcut(_translate("MainWindow", "="))
		self.a50.setShortcut(_translate("MainWindow", "BACKSPACE"))

def opensound():
        self.a50.setText("")
        self.a50.setObjectName("a50")
        self.c4.raise_()
        self.d4.raise_()
        self.c40.raise_()
        self.e4.raise_()
        self.f4.raise_()
        self.d40.raise_()
        self.g4.raise_()
        self.a4.raise_()
        self.b4.raise_()
        self.c5.raise_()
        self.d5.raise_()
        self.a5.raise_()
        self.e5.raise_()
        self.g5.raise_()
        self.f5.raise_()
        self.b5.raise_()
        self.c6.raise_()
        self.f40.raise_()
        self.g40.raise_()
        self.a40.raise_()
        self.c50.raise_()
        self.d50.raise_()
        self.f50.raise_()
        self.g50.raise_()
        self.a50.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
		
        # Here we make a dict of threads called th
        self.th = {}
		
        # Lets connect a key to the button.
        # Lets say c4 is a button or key of piano
        # As u can see that i have added all the keys here
        # These are white keys
        self.c4.clicked.connect(self.run_threads)
        self.d4.clicked.connect(self.run_threads)
        self.e4.clicked.connect(self.run_threads)
        self.f4.clicked.connect(self.run_threads)
        self.g4.clicked.connect(self.run_threads) 
        self.a4.clicked.connect(self.run_threads) 
        self.b4.clicked.connect(self.run_threads) 
        self.c5.clicked.connect(self.run_threads) 
        self.d5.clicked.connect(self.run_threads) 
        self.e5.clicked.connect(self.run_threads) 
        self.f5.clicked.connect(self.run_threads)
        self.g5.clicked.connect(self.run_threads) 
        self.a5.clicked.connect(self.run_threads) 
        self.b5.clicked.connect(self.run_threads) 
        self.c6.clicked.connect(self.run_threads) 
		
        # These are the black keys
        self.c40.clicked.connect(self.run_threads) 
        self.c50.clicked.connect(self.run_threads) 
        self.d40.clicked.connect(self.run_threads) 
        self.d50.clicked.connect(self.run_threads) 
        self.f40.clicked.connect(self.run_threads) 
        self.f50.clicked.connect(self.run_threads) 
        self.g40.clicked.connect(self.run_threads) 
        self.g50.clicked.connect(self.run_threads) 
        self.a40.clicked.connect(self.run_threads) 
        self.a50.clicked.connect(self.run_threads) 
		
        # ok so lets run it.
        # To show how its working lets print the path of the sender
        # Similarly lets add all the keys.
        # Thanks for watching and please and share like and comment 
        # Oh yes lets play and see if all keys are working.
		
        # Lets make function to play sound
        def play_notes(self,notePath):
                playsound.playsound(notePath,False)
                print(notePath)
	
	
        # Lets make another function to run the threads
	
        def run_threads(self):
                self.th[self.mw.sender().objectName()] = Thread(target = self.play_notes, args = ('Sounds/'+'{}.wav'.format(self.mw.sender().objectName()),)) 
                # So here the th dict will have a key which is the name of piano key, 
                # The thread has a target function self.play_notes, and arguments args is 
                # simply the path Sounds/keyname.wav
                # Then we start and join the thread
                self.th[self.mw.sender().objectName()].start()
                self.th[self.mw.sender().objectName()].join()
		
        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "pyshine piano"))
                self.c4.setShortcut(_translate("MainWindow", "TAB"))
                self.d4.setShortcut(_translate("MainWindow", "Q"))
                self.c40.setShortcut(_translate("MainWindow", "1"))
                self.d40.setShortcut(_translate("MainWindow", "2"))
                self.e4.setShortcut(_translate("MainWindow", "W"))
                self.f4.setShortcut(_translate("MainWindow", "E"))
                self.g4.setShortcut(_translate("MainWindow", "R"))
                self.a4.setShortcut(_translate("MainWindow", "T"))
                self.b4.setShortcut(_translate("MainWindow", "Y"))
                self.c5.setShortcut(_translate("MainWindow", "U"))
                self.d5.setShortcut(_translate("MainWindow", "I"))
                self.a5.setShortcut(_translate("MainWindow", "]"))
                self.e5.setShortcut(_translate("MainWindow", "o"))
                self.g5.setShortcut(_translate("MainWindow", "["))
                self.f5.setShortcut(_translate("MainWindow", "p"))
                self.b5.setShortcut(_translate("MainWindow"," DELETE "))
                self.c6.setShortcut(_translate("MainWindow", " Z"))
                self.f40.setShortcut(_translate("MainWindow", "4"))
                self.g40.setShortcut(_translate("MainWindow", "5"))
                self.a40.setShortcut(_translate("MainWindow", "6"))
                self.c50.setShortcut(_translate("MainWindow", "8"))
                self.d50.setShortcut(_translate("MainWindow", "9"))
                self.f50.setShortcut(_translate("MainWindow", "-"))
                self.g50.setShortcut(_translate("MainWindow", "="))
                self.a50.setShortcut(_translate("MainWindow", "BACKSPACE"))

                
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
